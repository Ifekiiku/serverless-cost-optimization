AWSTemplateFormatVersion: '2010-09-09'
Description: Intelligent AWS Cost Optimization Advisor - Lambda + SNS + S3 + EventBridge

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to receive cost optimization alerts

  LogBucketName:
    Type: String
    Description: S3 bucket name to store daily cost reports

Resources:

  CostAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  CostOptimizationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CostOptimizationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - ce:GetCostAndUsage
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - cloudwatch:GetMetricStatistics
                  - sns:Publish
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${LogBucketName}/*"

  CostOptimizationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CostOptimizationAdvisor
      Handler: index.lambda_handler
      Role: !GetAtt CostOptimizationRole.Arn
      Runtime: python3.12
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime, timedelta

          ce = boto3.client('ce')
          sns = boto3.client('sns')
          ec2 = boto3.client('ec2')
          cloudwatch = boto3.client('cloudwatch')
          s3 = boto3.client('s3')

          bucket_name = os.environ['LOG_BUCKET']
          topic_arn = os.environ['TOPIC_ARN']
          key = f"report-{datetime.utcnow().strftime('%Y-%m-%dT%H-%M-%S')}.json"

          def lambda_handler(event, context):
              report = []

              # 1. Cost Explorer Report
              today = datetime.utcnow().date()
              start = (today - timedelta(days=7)).strftime('%Y-%m-%d')
              end = today.strftime('%Y-%m-%d')

              cost_response = ce.get_cost_and_usage(
                  TimePeriod={'Start': start, 'End': end},
                  Granularity='DAILY',
                  Metrics=['UnblendedCost'],
                  GroupBy=[{'Type': 'DIMENSION', 'Key': 'SERVICE'}]
              )

              for day in cost_response['ResultsByTime']:
                  for group in day['Groups']:
                      service = group['Keys'][0]
                      cost = float(group['Metrics']['UnblendedCost']['Amount'])
                      if cost > 0.1:
                          report.append(f"[Cost] {service} - ${cost:.2f} on {day['TimePeriod']['Start']}")

              # 2. Idle EC2 Instances
              ec2_instances = ec2.describe_instances(Filters=[
                  {'Name': 'instance-state-name', 'Values': ['running']}
              ])
              for reservation in ec2_instances['Reservations']:
                  for instance in reservation['Instances']:
                      instance_id = instance['InstanceId']
                      metrics = cloudwatch.get_metric_statistics(
                          Namespace='AWS/EC2',
                          MetricName='CPUUtilization',
                          Dimensions=[{'Name': 'InstanceId', 'Value': instance_id}],
                          StartTime=datetime.utcnow() - timedelta(days=3),
                          EndTime=datetime.utcnow(),
                          Period=86400,
                          Statistics=['Average']
                      )
                      if metrics['Datapoints']:
                          avg_cpu = sum([point['Average'] for point in metrics['Datapoints']]) / len(metrics['Datapoints'])
                          if avg_cpu < 5:
                              report.append(f"[Idle EC2] {instance_id} - Avg CPU {avg_cpu:.2f}% (last 3 days)")

              # 3. Unused EBS Volumes
              volumes = ec2.describe_volumes(Filters=[
                  {'Name': 'status', 'Values': ['available']}
              ])
              for vol in volumes['Volumes']:
                  report.append(f"[Unused EBS] {vol['VolumeId']} - {vol['Size']} GB (unattached)")

              # 4. Send SNS Alert
              if report:
                  message = "\n".join(report)
                  sns.publish(
                      TopicArn=topic_arn,
                      Subject="AWS Cost Optimization Report",
                      Message=message
                  )
                  s3.put_object(
                      Bucket=bucket_name,
                      Key=key,
                      Body=json.dumps(report)
                  )

              return {
                  "message": "Scan complete",
                  "findings": report or ["No issues found."]
              }
      Environment:
        Variables:
          LOG_BUCKET: !Ref LogBucketName
          TOPIC_ARN: !Ref CostAlertsTopic

  CostOptimizationSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt CostOptimizationFunction.Arn
          Id: CostOptimizationLambdaTarget

  CostOptimizationScheduleTargetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CostOptimizationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CostOptimizationSchedule.Arn

  CostReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LogBucketName

Outputs:
  TopicArn:
    Description: SNS Topic ARN for alerts
    Value: !Ref CostAlertsTopic

  FunctionName:
    Description: Name of Lambda function
    Value: !Ref CostOptimizationFunction
